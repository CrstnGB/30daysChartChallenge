for i, row in dataset_filtered.iterrows():
category = row[1]
color = colors_diet[category]
fig.add_trace(go.Scatter(
x=[-row[15], -row[16]],  # Coordenadas x para cada grupo (inicio, fin)
y=[row[5], row[5]],  # Coordenadas y (mismo valor para conectar)
mode='lines',
line=dict(color=color, width=8),
showlegend = False
))
# Agregar puntos para la primera categoría (Inicio)
fig.add_trace(go.Scatter(
x=[-row[15]],
y=[row[5]],
text = [row[0]],
textposition = 'top center',
textfont = dict(family = 'Arial Bold'),
mode='markers+text',
name='Inicio Período',
marker=dict(color=color, size=10),
showlegend = False
))
# Agregar puntos para la segunda categoría (Fin)
fig.add_trace(go.Scatter(
x=[-row[16]],
y=[row[5]],
mode='markers',
name='Fin Período',
marker=dict(color=color, size=10),
showlegend = False
))
#Agregar un rectánculo para cada períodos
colors_period = {
'Cretaceous': 'rgb(165, 70, 87)',
'Jurassic': 'rgb(76, 106, 146)',
'Triassic': 'rgb(53, 94, 59)'
}
for period in start_periods.index:
fig.add_shape(
type = "rect",
x0 = -start_periods[period], x1 = -end_periods[period],
y0 = min(dataset_filtered['length']) - 5,
y1 = max(dataset_filtered['length']) + 5,
fillcolor = colors_period[period],
opacity = 0.3,
layer = "below",
line = dict(color = 'black', width = 3)
)
# Agregar texto a los rectángulos
fig.add_annotation(
x=(-start_periods[period] + -end_periods[period]) / 2,  # Centro en el eje x
y=max(dataset_filtered['length']) + 4,  # Top en el eje y
text=period,
showarrow=False,
font=dict(size=16, color=colors_period[period]),  # Propiedades de la fuente
align='center'  # Alineación del texto
)
# Agregar un trace para cada categoría en la leyenda
for categoria, color in colors_diet.items():
fig.add_trace(go.Scatter(
x=[None],  # No hay coordenadas, solo se usa para la leyenda
y=[None],
mode='lines',
line=dict(color=color, width=4),  # Color correspondiente
name=categoria,  # Nombre que aparecerá en la leyenda
showlegend=True  # Este trace aparecerá en la leyenda
))
# Configurar el layout
fig.update_layout(
title='¿En qué período vivieron los dinosaurios más grandes que hayan pisado la faz de la Tierra?',
xaxis_title='Millones de años atrás...',
yaxis_title='Metros de Altura',
#xaxis=dict(showgrid=False),
#yaxis=dict(showgrid=False, zeroline=False),
width = 1000,
height = 600
)
# Mostrar la gráfica
fig.show()
quit
---
title: "30DaysChanllenge"
setwd("~/5- Educación/6- Master Universitario en Big Data y Ciencias de Datos/2- Asignaturas/7. Visualización de datos/2. Actividades/Actividad1/30daysChartChallenge")
reticulate::repl_python()
quit
library(reticulate)
use_python("C:/Users/Cristian/AppData/Local/Programs/Python/Python312/python.exe", required = TRUE)
# Establecer opciones globales para todos los gráficos
knitr::opts_chunk$set(
fig.width = 12,  # Ancho de la figura en pulgadas
fig.height = 7,  # Altura de la figura en pulgadas
fig.align = 'center'  # Centrar las figuras
)
reticulate::repl_python()
import pandas as pd
from pathlib import Path
ruta = "datasets//dinosaurs.csv"
dataset = pd.read_csv(ruta)
#Se muestra info de la tabla
print(dataset.info())
#Existen variables como lived_in, length y species con nulos. Como se va a usar lengh para graficar, se eliminan los nulos
dataset = dataset.dropna(axis = 0)
#Se analizan los diferentes tipos de dinosaurios según su dieta
print(f"Tipos de dinosaurios según su dieta:")
dataset['diet'].unique()
#El resultado 'herbivorous/omnivorous' parece una incongruencia, ya que si es onminoro entonces es herbivoro y carnivoro. Veamos cuantos registros hay.
print(f"\nDinosaurios de tipo herbivorous/omnivorous:")
dataset[dataset['diet'] == 'herbivorous/omnivorous']
#Además, veamos los unknown
#Como hay pocos registros, se eliminan
dataset = dataset[(dataset['diet']!='herbivorous/omnivorous')&(dataset['diet']!='unknown')]
#Se verifica el resultado
dataset['diet'].unique()
#Por inspección visual de la columna "period", se comprueba que tiene casi siempre la misma estructura
dataset['period'].head()
#La estructura: premura del periodo + periodo + rango(x-y) + "million years ago". Se crea una función para descomponerla y obtener los años de comienzo y fin del periodo
# ¿Son todas así?
dataset['split_parts'] = dataset['period'].apply(lambda x: x.split())
dataset['count_splits'] = dataset['split_parts'].apply(lambda x: len(x))
dataset[dataset['count_splits'] < 6]
#Se filtra solo por los registros con 6 elementos después del split (sigue la estructura tipo)
dataset = dataset[dataset['count_splits'] == 6]
#Se crean las columnas de forma adecuada
dataset['stage'] = dataset['split_parts'].apply(lambda x: x[0])
dataset['period_name'] = dataset['split_parts'].apply(lambda x: x[1])
dataset['range_period'] = dataset['split_parts'].apply(lambda x: x[2])
#Ahora, del range_period, hay que crear el periodo de comienzo y fin, pero hay que comprobar que sigue este formato
print("¿Existe algún registro de rango de período que no contenga el separador '-'?")
print(dataset[~dataset['range_period'].str.contains('-')].shape)
#Existen registros sin fecha fin de periodo. Se eliminan estas entradas por estandarizar, ya que aun tenemos bastantes registros para graficar
dataset = dataset[dataset['range_period'].str.contains('-')]
#Se crean las columnas start_period y end_period
dataset['start_period'] = dataset['split_parts'].apply(lambda x: int(x[2].split("-")[0]))
dataset['end_period'] = dataset['split_parts'].apply(lambda x: int(x[2].split("-")[1]))
#Por último, la columna de "length" se va a cambiar a numérico
dataset['length'] = dataset['length'].apply(lambda x: float(x.replace("m", "")))
#Se ordena por length
dataset = dataset.sort_values(by = 'length', ascending = False)
#Se va a guardar el dataset para usarse en otro apartado
dataset.to_csv("datasets\\dinosaurs_mod.csv", index = False)
#Se definen los rangos de los periodos
start_periods = dataset.groupby('period_name')['start_period'].max()
end_periods = dataset.groupby('period_name')['start_period'].min()
print("Rangos de los períodos:")
print(start_periods)
print(end_periods)
#Como estos períodos deberían ser secuenciales, se va a calcular el punto medio entre periodos solapados para marcar la frontera
mean_point = int((end_periods['Triassic'] + start_periods['Jurassic']) / 2)
end_periods['Triassic'] = mean_point
start_periods['Jurassic'] = mean_point
mean_point = int((end_periods['Jurassic'] + start_periods['Cretaceous']) / 2)
end_periods['Jurassic'] = mean_point
start_periods['Cretaceous'] = mean_point
print("Rangos de los períodos tras procesarlos:")
print(start_periods)
print(end_periods)
#Ahora se van a graficar los 5 dinosaurios más grandes de cada tipo según su dieta
import warnings
warnings.filterwarnings('ignore')
import plotly.graph_objects as go
def create_dinosaur_plot():
global dataset_filtered
global start_periods
global end_periods
# Crear la figura
fig = go.Figure()
#Colores de lineas por dieta
colors_diet = {
'carnivorous': 'rgba(255, 0, 0, 0.5)', # Rojo con 50% de transparencia
'herbivorous': 'rgba(0, 255, 0, 0.5)', # Verde con 50% de transparencia
'omnivorous': 'rgba(0, 0, 255, 0.5)',  # Azul con 50% de transparencia
}
dataset_filtered = pd.concat([dataset[dataset['diet'] == 'carnivorous'].head(5),
dataset[dataset['diet'] == 'herbivorous'].head(5),
dataset[dataset['diet'] == 'omnivorous'].head(5)], axis = 0)
dataset_filtered = dataset_filtered.sort_values(by = 'length', ascending = True)
# Agregar las líneas horizontales (conexión entre puntos)
for i, row in dataset_filtered.iterrows():
category = row[1]
color = colors_diet[category]
fig.add_trace(go.Scatter(
x=[-row[15], -row[16]],  # Coordenadas x para cada grupo (inicio, fin)
y=[row[5], row[5]],  # Coordenadas y (mismo valor para conectar)
mode='lines',
line=dict(color=color, width=8),
showlegend = False
))
# Agregar puntos para la primera categoría (Inicio)
fig.add_trace(go.Scatter(
x=[-row[15]],
y=[row[5]],
text = [row[0]],
textposition = 'top center',
textfont = dict(family = 'Arial Bold'),
mode='markers+text',
name='Inicio Período',
marker=dict(color=color, size=10),
showlegend = False
))
# Agregar puntos para la segunda categoría (Fin)
fig.add_trace(go.Scatter(
x=[-row[16]],
y=[row[5]],
mode='markers',
name='Fin Período',
marker=dict(color=color, size=10),
showlegend = False
))
#Agregar un rectánculo para cada períodos
colors_period = {
'Cretaceous': 'rgb(165, 70, 87)',
'Jurassic': 'rgb(76, 106, 146)',
'Triassic': 'rgb(53, 94, 59)'
}
for period in start_periods.index:
fig.add_shape(
type = "rect",
x0 = -start_periods[period], x1 = -end_periods[period],
y0 = min(dataset_filtered['length']) - 5,
y1 = max(dataset_filtered['length']) + 5,
fillcolor = colors_period[period],
opacity = 0.3,
layer = "below",
line = dict(color = 'black', width = 3)
)
# Agregar texto a los rectángulos
fig.add_annotation(
x=(-start_periods[period] + -end_periods[period]) / 2,  # Centro en el eje x
y=max(dataset_filtered['length']) + 4,  # Top en el eje y
text=period,
showarrow=False,
font=dict(size=16, color=colors_period[period]),  # Propiedades de la fuente
align='center'  # Alineación del texto
)
# Agregar un trace para cada categoría en la leyenda
for categoria, color in colors_diet.items():
fig.add_trace(go.Scatter(
x=[None],  # No hay coordenadas, solo se usa para la leyenda
y=[None],
mode='lines',
line=dict(color=color, width=4),  # Color correspondiente
name=categoria,  # Nombre que aparecerá en la leyenda
showlegend=True  # Este trace aparecerá en la leyenda
))
# Configurar el layout
fig.update_layout(
title={
'text': '¿En qué período vivieron los dinosaurios más grandes que hayan pisado la faz de la Tierra?',
'font': {
'size': 15
}
},
xaxis_title='Millones de años atrás...',
yaxis_title='Metros de Altura',
width = 920,
height = 700
)
# Mostrar la gráfica
#fig.show()
return fig
fig = create_dinosaur_plot()
fig.show()
dataset.columns
dataset.taxonomy.uniques()
print(dataset.taxonomy.uniques())
print(dataset['taxonomy'].uniques())
print(dataset['taxonomy'].unique())
dataset.columns
dataset.species.unique()
dataset.columns
len(dataset.live_in.unique())
dataset.live_in.unique().value_counts
dataset.live_in.unique().value_counts()
dataset.live_in.unique()
dataset.live_in.uniques()
dataset['lived_in'].uniques()
dataset['lived_in'].unique()
dataset.columns
axis = 1, inplace = True)
dataset.head()
import pandas as pd
from pathlib import Path
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset['lived_in'].unique()
dataset.drop(['name', 'taxonomy', 'name_by', 'species', 'link', 'split_parts',
'count_splits', 'stage', 'range_period', 'start_period', 'end_period'],
axis = 1, inplace = True)
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
import pandas as pd
from pathlib import Path
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset = dataset.drop(['name', 'taxonomy', 'name_by', 'species', 'link', 'split_parts',
'count_splits', 'stage', 'range_period', 'start_period', 'end_period'],
axis = 1)
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
import pandas as pd
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset = dataset.drop(['name', 'taxonomy', 'name_by', 'species', 'link', 'split_parts',
'count_splits', 'stage', 'range_period', 'start_period', 'end_period'],
axis = 1)
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
reticulate::repl_python()
import pandas as pd
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset = dataset.drop(['name', 'taxonomy', 'name_by', 'species', 'link', 'split_parts',
'count_splits', 'stage', 'range_period', 'start_period', 'end_period'],
axis = 1)
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
quit
library(reticulate)
use_python("C:/Users/Cristian/AppData/Local/Programs/Python/Python312/python.exe", required = TRUE)
# Establecer opciones globales para todos los gráficos
knitr::opts_chunk$set(
fig.width = 12,  # Ancho de la figura en pulgadas
fig.height = 7,  # Altura de la figura en pulgadas
fig.align = 'center'  # Centrar las figuras
)
reticulate::repl_python()
import pandas as pd
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset = dataset.drop(['name', 'taxonomy', 'name_by', 'species', 'link', 'split_parts',\
'count_splits', 'stage', 'range_period', 'start_period', 'end_period'],\
axis = 1)
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
dataset = dataset.drop(['name', 'taxonomy', 'name_by', 'species', 'link', 'split_parts','count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1)
dataset.head()
import pandas as pd
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset = dataset.drop(['name', 'taxonomy', 'name_by', 'species', 'link', 'split_parts''count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1)
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
import pandas as pd
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset.drop(['name', 'taxonomy', 'name_by', 'species', 'link', 'split_parts', 'count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1, inplace = True)
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
import pandas as pd
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset.drop(['name', 'taxonomy', 'named_by', 'species', 'link', 'split_parts', 'count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1, inplace = True)
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
import pandas as pd
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset.drop(['name', 'period', 'taxonomy', 'named_by', 'species', 'link', 'split_parts', 'count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1, inplace = True)
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
import pandas as pd
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset.drop(['name', 'period', 'type', 'lived_in', 'taxonomy', 'named_by', 'species', 'link', 'split_parts', 'count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1, inplace = True)
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
plt.boxplot(dataset.length)
plt.boxplot(dataset['length'])
import matplotlib.pyplot as plt
plt.boxplot(dataset['length'])
plt.show()
import pandas as pd
import matplotlib.pyplot as plt
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset.drop(['name', 'period', 'type', 'lived_in', 'taxonomy', 'named_by', 'species', 'link', 'split_parts', 'count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1, inplace = True)
#Se discretiza la longitud de los dinosaurios según sus cuartiles
dataset['length'] = pd.qcut(dataset['length'], q = 4, labels=['Muy grandes', 'Grandes', 'Medianos', 'Pequeños'])
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
import pandas as pd
import matplotlib.pyplot as plt
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset.drop(['name', 'period', 'type', 'lived_in', 'taxonomy', 'named_by', 'species', 'link', 'split_parts', 'count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1, inplace = True)
#Se discretiza la longitud de los dinosaurios según sus cuartiles
#dataset['length'] = pd.qcut(dataset['length'], q = 4, labels=['Muy grandes', 'Grandes', 'Medianos', 'Pequeños'])
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
import pandas as pd
import matplotlib.pyplot as plt
ruta = "datasets//dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset.drop(['name', 'period', 'type', 'lived_in', 'taxonomy', 'named_by', 'species', 'link', 'split_parts', 'count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1, inplace = True)
#Se discretiza la longitud de los dinosaurios según sus cuartiles
dataset['length'] = pd.qcut(dataset['length'], q = 4, labels=['Pequeños', 'Medianos', 'Grandes', 'Muy grandes'])
dataset.head()
#dataset_encoded.get_dummies(dataset, columns=['diet', 'lived_in', 'type'])
import pandas as pd
import matplotlib.pyplot as plt
ruta = r"C:\Users\Cristian\Documents\5- Educación\6- Master Universitario en Big Data y Ciencias de Datos\2- Asignaturas\7. Visualización de datos\2. Actividades\Actividad1\30daysChartChallenge\datasets\dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset.drop(['name', 'period', 'type', 'lived_in', 'taxonomy', 'named_by', 'species', 'link', 'split_parts', 'count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1, inplace = True)
#Se discretiza la longitud de los dinosaurios según sus cuartiles
dataset['length'] = pd.qcut(dataset['length'], q = 4, labels=['Pequeños', 'Medianos', 'Grandes', 'Muy grandes'])
agg = dataset.groupby(['diet', 'length']).size().reset_index(name = 'count')
def plotear_relacion():
global agg
# Mapear etiquetas a índices
all_labels = pd.concat([agg['diet'], agg['length']]).unique()
label_to_index = {label: index for index, label in enumerate(all_labels)}
# Crear listas para los nodos y los enlaces
source = agg['diet'].map(label_to_index).tolist()  # Dietas
target = agg['length'].map(label_to_index).tolist()  # Longitudes
values = agg['count'].tolist()  # Conteos
# Asignar colores a cada tipo de dieta
diet_colors = {
'carnivorous': 'rgba(255, 0, 0, 0.8)',  # Rojo para carnívoros
'herbivorous': 'rgba(0, 255, 0, 0.8)',   # Verde para herbívoros
'omnivorous': 'rgba(0, 0, 255, 0.8)'      # Azul para omnívoros
}
# Crear una lista de colores para cada enlace basado en la dieta
link_colors = [diet_colors[diet] for diet in agg['diet']]
# Crear el diagrama de Sankey
fig = go.Figure(go.Sankey(
node=dict(
pad=15,
thickness=20,
line=dict(color='black', width=0.5),
label=all_labels,
color='blue'  # Color de los nodos
),
link=dict(
source=source,  # Índices de los nodos de origen
target=target,  # Índices de los nodos de destino
value=values,   # Valores de los enlaces
color=link_colors  # Colores de los enlaces según dieta
)
))
# Configurar el layout
fig.update_layout(title_text='¿Qué correlación existe entre el tamaño y la dieta?', font_size=10)
return fig
#Llamar a la función
relacion = plotear_relacion()
# Mostrar el diagrama
relacion.show()
import pandas as pd
import matplotlib.pyplot as plt
ruta = "datasets/dinosaurs_mod.csv"
dataset = pd.read_csv(ruta)
dataset.columns
dataset.drop(['name', 'period', 'type', 'lived_in', 'taxonomy', 'named_by', 'species', 'link', 'split_parts', 'count_splits', 'stage', 'range_period', 'start_period', 'end_period'], axis = 1, inplace = True)
#Se discretiza la longitud de los dinosaurios según sus cuartiles
dataset['length'] = pd.qcut(dataset['length'], q = 4, labels=['Pequeños', 'Medianos', 'Grandes', 'Muy grandes'])
agg = dataset.groupby(['diet', 'length']).size().reset_index(name = 'count')
def plotear_relacion():
global agg
# Mapear etiquetas a índices
all_labels = pd.concat([agg['diet'], agg['length']]).unique()
label_to_index = {label: index for index, label in enumerate(all_labels)}
# Crear listas para los nodos y los enlaces
source = agg['diet'].map(label_to_index).tolist()  # Dietas
target = agg['length'].map(label_to_index).tolist()  # Longitudes
values = agg['count'].tolist()  # Conteos
# Asignar colores a cada tipo de dieta
diet_colors = {
'carnivorous': 'rgba(255, 0, 0, 0.8)',  # Rojo para carnívoros
'herbivorous': 'rgba(0, 255, 0, 0.8)',   # Verde para herbívoros
'omnivorous': 'rgba(0, 0, 255, 0.8)'      # Azul para omnívoros
}
# Crear una lista de colores para cada enlace basado en la dieta
link_colors = [diet_colors[diet] for diet in agg['diet']]
# Crear el diagrama de Sankey
fig = go.Figure(go.Sankey(
node=dict(
pad=15,
thickness=20,
line=dict(color='black', width=0.5),
label=all_labels,
color='blue'  # Color de los nodos
),
link=dict(
source=source,  # Índices de los nodos de origen
target=target,  # Índices de los nodos de destino
value=values,   # Valores de los enlaces
color=link_colors  # Colores de los enlaces según dieta
)
))
# Configurar el layout
fig.update_layout(title_text='¿Qué correlación existe entre el tamaño y la dieta?', font_size=10)
return fig
#Llamar a la función
relacion = plotear_relacion()
# Mostrar el diagrama
relacion.show()
